<!DOCTYPE html>
<html lang="en">
<body>
<p id="abc"></p> 
<p id="ABC"></p>
<script>
    var a=5;
    var b =6;
    var c=a+b;
    document.getElementById("abc").innerHTML=+c;
    var x="Aryan"+" "+"Choudhary";
    document.getElementById("ABC").innerHTML=""+x;
</script>
<h1><b>
    JS identifiers
</b></h1>
<ul>
    <li>name can start dolar sign and underscore</li>
    <li>names must begin with a letter</li>
    <li>name are case sensitive</li>
    <li>reserved words cannot be used as name</li>
</ul>
<h2>
    <b>
        Re-declaring JS variables
    </b>
</h2>
If you re-declare a JS variable, it will not lose its value. The variable name will still have the value after the execution of these statements.

<h2><b>JS arthmetic</b></h2>
<ul><li>
    <b>
        You can also add strings, but strings will be concatenated:
    </b></li>
</ul>
<h2><b>JS Operators</b></h2>
<ul>
    <li>
        <h4>
            JS Arthmetic Operators
        </h4>
    </li>
</ul>
<table border="solid">
    <tr>
        <th>
            Operator
        </th>

    </tr>
    <tr>
        <td>
            =
        </td>
        
    </tr>
    <tr>
        <td>
            +
        </td>
        
    </tr>
    <tr>
        <td>
            -
        </td>
        
    </tr>
    <tr>
        <td>
            *
        </td>
        
    </tr>
    <tr>
        <td>
            /
        </td>
        
    </tr>
    <tr>
        <td>
            %
        </td>
        
    </tr>
</table>
<br>
<h2>
    <b>
        Operator Precedure
    </b>
</h2>
Operator precedure describes the order in which operators are performed in arthmetic expression.
<br>

<h2>
    <b>
        JS Booleans
    </b>
</h2>
Booleans can have only two values:- True & False
<br>
<h2>
    <b>
        JS Arrays
    </b>
</h2>
JS Arrays are written with square brackets. Array items are separated by commas. 
<br>
<h2>
    <b>
        JS Objects
    </b>
</h2>
Objects are written in curly brackets. Object properties are written as name, value pairs separated by commas.
<br>
<h2>
    <b>
        Conditional statements
    </b>
</h2>
In Js we have the following conditional statements:-
<ul>
    <li>
        Use <q>if</q> to specify a block of code to be executed if a specified condition is true.
    </li>
    <li>
        Use <q>else</q> to specify a block of code to be executed, if the same condition is false.
    </li>
    <li>
        Use <q>else if </q> to specify a new condition to test, if the condition is true 
    </li>
    <li>

    </li>
</ul>
<h2>
    <b>Events of JS</b>
</h2>
An HTML event can be something the browser does, or something a user does.Often, when events happen, you may want to do something.JavaScript lets you execute code when events are detected.HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.
With single quotes:<q>element event='some JavaScript'</q>
<q>JavaScript code is often several lines long. It is more common to see event attributes calling functions</q>
<ul>
    <li>
        <b>onclick</b>
        An onclick attribute (with code), is added to a button element:
    </li>
    <li>
        <table border>
            <tr><th>Event</th>
            <th>Description</th></tr>
            <tr><td>onchange</td>
            <td>An HTML element has been changed</td></tr>
            <tr><td>onclick</td>
            <td>The user clicks an HTML element</td></tr>
            <tr><td>onmouseover</td>
            <td>The user moves the mouse over an HTML element</td></tr>
            <tr><td>onkeydown</td>
            <td>The user pushes a keyboard key</td></tr>
            <tr><td>onmouseout</td>
            <td>The user moves the mouse away from an HTML element</td></tr>
            <tr><td>onload</td>
            <td>The browser has finished loading the page</td></tr>
        </table>
    </li>
</ul>
<h2>
    <b>
        JavaScript Event Handlers
    </b>
</h2>
Event handlers can be used to handle and verify user input, user actions, and browser actions
<ul>
    <li>Things that should be done every time a page loads</li>
    <li>Things that should be done when the page is closed</li>
    <li>Action that should be performed when a user clicks a button</li>
    <li>Content that should be verified when a user inputs data</li>
</ul>
Many different methods can be used to let JavaScript work with events
<ul>
    <li>HTML event attributes can execute JavaScript code directly
       </li>
    <li> HTML event attributes can call JavaScript functions
       </li>
    <li> You can assign your own event handler functions to HTML elements
        </li>
    <li>You can prevent events from being sent or being handled</li>
</ul>
<h2>
    <b>
        JS Form validation
    </b>
</h2>
Form validation normally used to occur at the server, after the client had entered all the neccesary data and then pressed the <q>submit</q> button

</body>
</html>

